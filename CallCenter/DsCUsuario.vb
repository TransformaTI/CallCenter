'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3705.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsCUsuario
    Inherits DataSet
    
    Private tableCelula As CelulaDataTable
    
    Private tableUsuario As UsuarioDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Celula")) Is Nothing) Then
                Me.Tables.Add(New CelulaDataTable(ds.Tables("Celula")))
            End If
            If (Not (ds.Tables("Usuario")) Is Nothing) Then
                Me.Tables.Add(New UsuarioDataTable(ds.Tables("Usuario")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Celula As CelulaDataTable
        Get
            Return Me.tableCelula
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Usuario As UsuarioDataTable
        Get
            Return Me.tableUsuario
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsCUsuario = CType(MyBase.Clone,DsCUsuario)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Celula")) Is Nothing) Then
            Me.Tables.Add(New CelulaDataTable(ds.Tables("Celula")))
        End If
        If (Not (ds.Tables("Usuario")) Is Nothing) Then
            Me.Tables.Add(New UsuarioDataTable(ds.Tables("Usuario")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableCelula = CType(Me.Tables("Celula"),CelulaDataTable)
        If (Not (Me.tableCelula) Is Nothing) Then
            Me.tableCelula.InitVars
        End If
        Me.tableUsuario = CType(Me.Tables("Usuario"),UsuarioDataTable)
        If (Not (Me.tableUsuario) Is Nothing) Then
            Me.tableUsuario.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsCUsuario"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsCUsuario.xsd"
        Me.Locale = New System.Globalization.CultureInfo("es-MX")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableCelula = New CelulaDataTable
        Me.Tables.Add(Me.tableCelula)
        Me.tableUsuario = New UsuarioDataTable
        Me.Tables.Add(Me.tableUsuario)
    End Sub
    
    Private Function ShouldSerializeCelula() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeUsuario() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub CelulaRowChangeEventHandler(ByVal sender As Object, ByVal e As CelulaRowChangeEvent)
    
    Public Delegate Sub UsuarioRowChangeEventHandler(ByVal sender As Object, ByVal e As UsuarioRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CelulaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCelula As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Private columnSiglas As DataColumn
        
        Private columnProducto As DataColumn
        
        Private columnTelefono As DataColumn
        
        Friend Sub New()
            MyBase.New("Celula")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CelulaColumn As DataColumn
            Get
                Return Me.columnCelula
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Friend ReadOnly Property SiglasColumn As DataColumn
            Get
                Return Me.columnSiglas
            End Get
        End Property
        
        Friend ReadOnly Property ProductoColumn As DataColumn
            Get
                Return Me.columnProducto
            End Get
        End Property
        
        Friend ReadOnly Property TelefonoColumn As DataColumn
            Get
                Return Me.columnTelefono
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CelulaRow
            Get
                Return CType(Me.Rows(index),CelulaRow)
            End Get
        End Property
        
        Public Event CelulaRowChanged As CelulaRowChangeEventHandler
        
        Public Event CelulaRowChanging As CelulaRowChangeEventHandler
        
        Public Event CelulaRowDeleted As CelulaRowChangeEventHandler
        
        Public Event CelulaRowDeleting As CelulaRowChangeEventHandler
        
        Public Overloads Sub AddCelulaRow(ByVal row As CelulaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCelulaRow(ByVal Celula As Byte, ByVal Descripcion As String, ByVal Siglas As String, ByVal Producto As Short, ByVal Telefono As String) As CelulaRow
            Dim rowCelulaRow As CelulaRow = CType(Me.NewRow,CelulaRow)
            rowCelulaRow.ItemArray = New Object() {Celula, Descripcion, Siglas, Producto, Telefono}
            Me.Rows.Add(rowCelulaRow)
            Return rowCelulaRow
        End Function
        
        Public Function FindByCelula(ByVal Celula As Byte) As CelulaRow
            Return CType(Me.Rows.Find(New Object() {Celula}),CelulaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CelulaDataTable = CType(MyBase.Clone,CelulaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CelulaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCelula = Me.Columns("Celula")
            Me.columnDescripcion = Me.Columns("Descripcion")
            Me.columnSiglas = Me.Columns("Siglas")
            Me.columnProducto = Me.Columns("Producto")
            Me.columnTelefono = Me.Columns("Telefono")
        End Sub
        
        Private Sub InitClass()
            Me.columnCelula = New DataColumn("Celula", GetType(System.Byte), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCelula)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.columnSiglas = New DataColumn("Siglas", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSiglas)
            Me.columnProducto = New DataColumn("Producto", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnProducto)
            Me.columnTelefono = New DataColumn("Telefono", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTelefono)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCelula}, true))
            Me.columnCelula.AllowDBNull = false
            Me.columnCelula.Unique = true
        End Sub
        
        Public Function NewCelulaRow() As CelulaRow
            Return CType(Me.NewRow,CelulaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CelulaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CelulaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CelulaRowChangedEvent) Is Nothing) Then
                RaiseEvent CelulaRowChanged(Me, New CelulaRowChangeEvent(CType(e.Row,CelulaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CelulaRowChangingEvent) Is Nothing) Then
                RaiseEvent CelulaRowChanging(Me, New CelulaRowChangeEvent(CType(e.Row,CelulaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CelulaRowDeletedEvent) Is Nothing) Then
                RaiseEvent CelulaRowDeleted(Me, New CelulaRowChangeEvent(CType(e.Row,CelulaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CelulaRowDeletingEvent) Is Nothing) Then
                RaiseEvent CelulaRowDeleting(Me, New CelulaRowChangeEvent(CType(e.Row,CelulaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCelulaRow(ByVal row As CelulaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CelulaRow
        Inherits DataRow
        
        Private tableCelula As CelulaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCelula = CType(Me.Table,CelulaDataTable)
        End Sub
        
        Public Property Celula As Byte
            Get
                Return CType(Me(Me.tableCelula.CelulaColumn),Byte)
            End Get
            Set
                Me(Me.tableCelula.CelulaColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Try 
                    Return CType(Me(Me.tableCelula.DescripcionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCelula.DescripcionColumn) = value
            End Set
        End Property
        
        Public Property Siglas As String
            Get
                Try 
                    Return CType(Me(Me.tableCelula.SiglasColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCelula.SiglasColumn) = value
            End Set
        End Property
        
        Public Property Producto As Short
            Get
                Try 
                    Return CType(Me(Me.tableCelula.ProductoColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCelula.ProductoColumn) = value
            End Set
        End Property
        
        Public Property Telefono As String
            Get
                Try 
                    Return CType(Me(Me.tableCelula.TelefonoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCelula.TelefonoColumn) = value
            End Set
        End Property
        
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableCelula.DescripcionColumn)
        End Function
        
        Public Sub SetDescripcionNull()
            Me(Me.tableCelula.DescripcionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSiglasNull() As Boolean
            Return Me.IsNull(Me.tableCelula.SiglasColumn)
        End Function
        
        Public Sub SetSiglasNull()
            Me(Me.tableCelula.SiglasColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsProductoNull() As Boolean
            Return Me.IsNull(Me.tableCelula.ProductoColumn)
        End Function
        
        Public Sub SetProductoNull()
            Me(Me.tableCelula.ProductoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTelefonoNull() As Boolean
            Return Me.IsNull(Me.tableCelula.TelefonoColumn)
        End Function
        
        Public Sub SetTelefonoNull()
            Me(Me.tableCelula.TelefonoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CelulaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CelulaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CelulaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CelulaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UsuarioDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnUsuario As DataColumn
        
        Private columnNombre As DataColumn
        
        Private columnClave As DataColumn
        
        Private columnEmpleado As DataColumn
        
        Private columnCelula As DataColumn
        
        Private columnStatus As DataColumn
        
        Friend Sub New()
            MyBase.New("Usuario")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property UsuarioColumn As DataColumn
            Get
                Return Me.columnUsuario
            End Get
        End Property
        
        Friend ReadOnly Property NombreColumn As DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        Friend ReadOnly Property ClaveColumn As DataColumn
            Get
                Return Me.columnClave
            End Get
        End Property
        
        Friend ReadOnly Property EmpleadoColumn As DataColumn
            Get
                Return Me.columnEmpleado
            End Get
        End Property
        
        Friend ReadOnly Property CelulaColumn As DataColumn
            Get
                Return Me.columnCelula
            End Get
        End Property
        
        Friend ReadOnly Property StatusColumn As DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As UsuarioRow
            Get
                Return CType(Me.Rows(index),UsuarioRow)
            End Get
        End Property
        
        Public Event UsuarioRowChanged As UsuarioRowChangeEventHandler
        
        Public Event UsuarioRowChanging As UsuarioRowChangeEventHandler
        
        Public Event UsuarioRowDeleted As UsuarioRowChangeEventHandler
        
        Public Event UsuarioRowDeleting As UsuarioRowChangeEventHandler
        
        Public Overloads Sub AddUsuarioRow(ByVal row As UsuarioRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddUsuarioRow(ByVal Usuario As String, ByVal Nombre As String, ByVal Clave As String, ByVal Empleado As Integer, ByVal Celula As Byte, ByVal Status As String) As UsuarioRow
            Dim rowUsuarioRow As UsuarioRow = CType(Me.NewRow,UsuarioRow)
            rowUsuarioRow.ItemArray = New Object() {Usuario, Nombre, Clave, Empleado, Celula, Status}
            Me.Rows.Add(rowUsuarioRow)
            Return rowUsuarioRow
        End Function
        
        Public Function FindByUsuario(ByVal Usuario As String) As UsuarioRow
            Return CType(Me.Rows.Find(New Object() {Usuario}),UsuarioRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As UsuarioDataTable = CType(MyBase.Clone,UsuarioDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New UsuarioDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnUsuario = Me.Columns("Usuario")
            Me.columnNombre = Me.Columns("Nombre")
            Me.columnClave = Me.Columns("Clave")
            Me.columnEmpleado = Me.Columns("Empleado")
            Me.columnCelula = Me.Columns("Celula")
            Me.columnStatus = Me.Columns("Status")
        End Sub
        
        Private Sub InitClass()
            Me.columnUsuario = New DataColumn("Usuario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUsuario)
            Me.columnNombre = New DataColumn("Nombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre)
            Me.columnClave = New DataColumn("Clave", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClave)
            Me.columnEmpleado = New DataColumn("Empleado", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmpleado)
            Me.columnCelula = New DataColumn("Celula", GetType(System.Byte), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCelula)
            Me.columnStatus = New DataColumn("Status", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatus)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnUsuario}, true))
            Me.columnUsuario.AllowDBNull = false
            Me.columnUsuario.Unique = true
        End Sub
        
        Public Function NewUsuarioRow() As UsuarioRow
            Return CType(Me.NewRow,UsuarioRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New UsuarioRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(UsuarioRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UsuarioRowChangedEvent) Is Nothing) Then
                RaiseEvent UsuarioRowChanged(Me, New UsuarioRowChangeEvent(CType(e.Row,UsuarioRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UsuarioRowChangingEvent) Is Nothing) Then
                RaiseEvent UsuarioRowChanging(Me, New UsuarioRowChangeEvent(CType(e.Row,UsuarioRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UsuarioRowDeletedEvent) Is Nothing) Then
                RaiseEvent UsuarioRowDeleted(Me, New UsuarioRowChangeEvent(CType(e.Row,UsuarioRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UsuarioRowDeletingEvent) Is Nothing) Then
                RaiseEvent UsuarioRowDeleting(Me, New UsuarioRowChangeEvent(CType(e.Row,UsuarioRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveUsuarioRow(ByVal row As UsuarioRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UsuarioRow
        Inherits DataRow
        
        Private tableUsuario As UsuarioDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableUsuario = CType(Me.Table,UsuarioDataTable)
        End Sub
        
        Public Property Usuario As String
            Get
                Return CType(Me(Me.tableUsuario.UsuarioColumn),String)
            End Get
            Set
                Me(Me.tableUsuario.UsuarioColumn) = value
            End Set
        End Property
        
        Public Property Nombre As String
            Get
                Try 
                    Return CType(Me(Me.tableUsuario.NombreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUsuario.NombreColumn) = value
            End Set
        End Property
        
        Public Property Clave As String
            Get
                Try 
                    Return CType(Me(Me.tableUsuario.ClaveColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUsuario.ClaveColumn) = value
            End Set
        End Property
        
        Public Property Empleado As Integer
            Get
                Try 
                    Return CType(Me(Me.tableUsuario.EmpleadoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUsuario.EmpleadoColumn) = value
            End Set
        End Property
        
        Public Property Celula As Byte
            Get
                Try 
                    Return CType(Me(Me.tableUsuario.CelulaColumn),Byte)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUsuario.CelulaColumn) = value
            End Set
        End Property
        
        Public Property Status As String
            Get
                Try 
                    Return CType(Me(Me.tableUsuario.StatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUsuario.StatusColumn) = value
            End Set
        End Property
        
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tableUsuario.NombreColumn)
        End Function
        
        Public Sub SetNombreNull()
            Me(Me.tableUsuario.NombreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsClaveNull() As Boolean
            Return Me.IsNull(Me.tableUsuario.ClaveColumn)
        End Function
        
        Public Sub SetClaveNull()
            Me(Me.tableUsuario.ClaveColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEmpleadoNull() As Boolean
            Return Me.IsNull(Me.tableUsuario.EmpleadoColumn)
        End Function
        
        Public Sub SetEmpleadoNull()
            Me(Me.tableUsuario.EmpleadoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCelulaNull() As Boolean
            Return Me.IsNull(Me.tableUsuario.CelulaColumn)
        End Function
        
        Public Sub SetCelulaNull()
            Me(Me.tableUsuario.CelulaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tableUsuario.StatusColumn)
        End Function
        
        Public Sub SetStatusNull()
            Me(Me.tableUsuario.StatusColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UsuarioRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As UsuarioRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As UsuarioRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As UsuarioRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
